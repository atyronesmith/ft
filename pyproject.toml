[tool.poetry]
name = "finetune"
version = "0.1.0"
description = "Generic fine-tuning application optimized for Apple Silicon"
authors = ["FineTune Team <finetune@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/yourusername/finetune"
repository = "https://github.com/yourusername/finetune"
documentation = "https://finetune.readthedocs.io"
keywords = ["machine-learning", "fine-tuning", "llm", "mlx", "apple-silicon"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "finetune", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Core ML frameworks
mlx = {version = "^0.10.0", markers = "sys_platform == 'darwin' and platform_machine == 'arm64'"}
torch = "^2.1.0"
transformers = "^4.36.0"
huggingface_hub = "^0.20.0"
peft = "^0.7.0"
datasets = "^2.15.0"
accelerate = "^0.25.0"
tokenizers = "^0.15.0"
sentencepiece = "^0.1.99"

# Quantization (optional, may not work on all platforms)
bitsandbytes = {version = "^0.41.0", optional = true}

# Web and API
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
streamlit = {version = "^1.29.0", optional = true}
python-multipart = "^0.0.6"
websockets = "^12.0.0"
aiofiles = "^23.2.0"

# CLI
typer = {extras = ["all"], version = "^0.9.0"}
rich = "^13.7.0"
questionary = "^2.0.0"

# Data processing
pandas = "^2.1.0"
pyarrow = "^14.0.0"
h5py = "^3.10.0"
orjson = "^3.9.0"
pyyaml = "^6.0.1"

# Configuration and validation
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
hydra-core = {version = "^1.3.0", optional = true}
omegaconf = {version = "^2.3.0", optional = true}
python-dotenv = "^1.0.0"

# Database
sqlalchemy = "^2.0.0"
alembic = {version = "^1.13.0", optional = true}

# Logging and monitoring
loguru = "^0.7.0"
tqdm = "^4.66.0"
tensorboard = "^2.15.0"
wandb = {version = "^0.16.0", optional = true}

# Visualization
matplotlib = "^3.8.0"
plotly = {version = "^5.18.0", optional = true}

# System utilities
psutil = "^5.9.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
hypothesis = "^6.92.0"
ruff = "^0.1.0"
black = "^23.12.0"
mypy = "^1.7.0"
pre-commit = "^3.6.0"
ipykernel = "^6.27.0"
notebook = "^7.0.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.5.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
pdoc = "^14.1.0"

[tool.poetry.extras]
ui = ["streamlit"]
monitoring = ["wandb", "plotly"]
config = ["hydra-core", "omegaconf"]
db = ["alembic"]
quantization = ["bitsandbytes"]
all = ["streamlit", "wandb", "plotly", "hydra-core", "omegaconf", "alembic", "bitsandbytes"]

[tool.poetry.scripts]
ft = "finetune.cli.app:main"
finetune = "finetune.cli.app:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py311"
extend-select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in init files
"tests/*" = ["S101", "E402"]  # use of assert in tests, imports after path modifications

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "mlx.*",
    "transformers.*",
    "datasets.*",
    "streamlit.*",
    "tensorboard.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=finetune",
    "--cov-report=term-missing",
    "--cov-report=html",
]
filterwarnings = [
    "ignore::ResourceWarning:unittest.mock",
    "ignore::ResourceWarning:click.testing",
    "ignore::ResourceWarning:codecs",
    "ignore::ResourceWarning:importlib",
]
markers = [
    "requires_mlx: marks tests as requiring MLX (deselect with '-m \"not requires_mlx\"')",
    "requires_torch: marks tests as requiring PyTorch (deselect with '-m \"not requires_torch\"')",
    "requires_transformers: marks tests as requiring Transformers (deselect with '-m \"not requires_transformers\"')",
    "requires_real_model: marks tests as requiring real model loading (deselect with '-m \"not requires_real_model\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
^/(
  (
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
skip_glob = ["**/migrations/*", ".venv/*"]

[tool.coverage.run]
source = ["src/finetune"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/ui/*",  # Exclude UI code from coverage
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
